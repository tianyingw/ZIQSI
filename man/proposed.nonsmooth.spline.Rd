% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/estimation.R
\name{proposed.nonsmooth.spline}
\alias{proposed.nonsmooth.spline}
\title{proposed.nonsmooth.spline}
\usage{
proposed.nonsmooth.spline(
  y,
  Xl,
  Xq,
  xl,
  xq,
  taus = seq(0, 0.99, 0.01),
  delta = 0.499,
  m = 3,
  u
)
}
\arguments{
\item{y}{n*1 vector, the observed outcome}

\item{Xl}{n*p matrix, the observed covariates in logistic regression}

\item{Xq}{n*q matrix, the observed covariates in quantile regression}

\item{xl}{m*p matrix, the new covariates in logistic regression, with which conditional quantile function are estimated}

\item{xq}{m*q matrix, the new covariates in quantile regression, with which conditional quantile function are estimated}

\item{taus}{k*1 vector, the grid of target tau's of y}

\item{delta}{constant, better to keep the default 0.499}

\item{m}{numeric variable, the order of B-spline function}

\item{u}{q*1 vector, usually using a vector where all values are equal and the norm is 1, the initial parameter for minimizing the profile likelihood function for quantile regression.}
}
\value{
quantiles of a m*k matrix, each row is the estimated quantiles for each new case
}
\description{
This function estimates the quantiles for given sample(s) on a grid of quantile levels.
}
\examples{
# Set the random seed for reproducibility
set.seed(10001)

# Sample size
n = 500

# Generate the true model for simulation
## Probability of Y > 0 given covariate x
p = function(x1, x2, x3, x4, x5, gam0 = -0.4, gam1 = -0.480,
              gam2 = -0.022, gam3 = 0.021, gam4 = 0.015, gam5 = -0.009) {
  lc = gam0 + gam1 * x1 + gam2 * x2 + gam3 * x3 + gam4 * x4 + gam5 * x5
  exp(lc) / (1 + exp(lc))
}

## Define beta functions
bet1 = function(x) {(0.3 * sqrt(x) - x) * 2}
bet2 = function(x) {x^2 * 2.2}
bet3 = function(x) {(x^2 - 0.5 * x + 0.6) * 2 / 3}
bet4 = function(x) {-sin(x * 2 * pi) * 0.1}
bet5 = function(x) {-(0.3 * x^2 - x) * 2}
bet0 = function(x) {-147.7 * x - 50 * x^2 - 20}
bet = function(x,u){x^4*u*10^(-5)/6+x^2*u*0.2/3}
## G_tau function
func = function(x, tau) {
  return(bet(x \%*\% rbind(bet1(tau), bet2(tau), bet3(tau), bet4(tau), bet5(tau)) + bet0(tau), tau))
}

# Given covariates for quantile estimation
X1 = c(0, 1)  # sex
X2 = qnorm(0.5, 28, 2)  # bmi
X3 = qnorm(0.5, 92.5, 13)  # waist
X4 = qnorm(0.5, 80, 12)  # diastolic_bp
X5 = qnorm(0.5, 124, 18.5)  # systolic_bp
X0 = cbind(c(rep(X1[1], 1), rep(X1[2], 1)), rep(X2, 2), rep(X3, 2), rep(X4, 2), rep(X5, 2))

# Given samples
x1 = rbinom(n, 1, 0.5)  # Medicament use
x2 = rnorm(n, 28, 2)  # bmi
x3 = rnorm(n, 92.5, 13)  # waist
x4 = rnorm(n, 80, 12)  # diastolic_bp
x5 = rnorm(n, 124, 18.5)  # systolic_bp
x0 = rep(1, n)

# Covariates of each sample
X = cbind(x0, x1, x2, x3, x4, x5)
u = runif(n)
b = rbinom(n, 1, p(x1, x2, x3, x4, x5))
w = bet(bet1(u) * x1 + bet2(u) * x2 + bet3(u) * x3 + bet4(u) * x4 + bet5(u) * x5 + bet0(u), u)

# Simulated quantiles of each sample
y = b * w

# Estimated quantile curves for the given covariate x
A = proposed.nonsmooth.spline(y = y, Xl = cbind(x1, x2, x3, x4, x5),
                                 Xq = cbind(x0, x1, x2, x3, x4, x5),
                                 xl = X0,
                                 xq = cbind(1, X0),
                                 taus = seq(0, 0.99, by = 0.01),
                                 delta = 0.499,
                                 m = 4,
                                 u = rep(1/sqrt(6), 6))
# plot the estimated quantile curve for the first sample
# plot(seq(0,0.99,0.01),A[1,])
# plot the estimated quantile curve for the second sample
# plot(seq(0,0.99,0.01),A[2,])
}
